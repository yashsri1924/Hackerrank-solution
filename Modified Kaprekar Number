#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'kaprekarNumbers' function below.
 *
 * The function accepts following parameters:
 *  1. INTEGER p
 *  2. INTEGER q
 */

void kaprekarNumbers(int p, int q) {
    
    int found = 0;  
    
    for (long i = p; i <= q; i++) {
        long sq = i * i;

        char sq_str[30];
        sprintf(sq_str, "%ld", sq);

        int d = 0, len = strlen(sq_str);
        long temp = i;

        while (temp > 0) {
            d++;
            temp /= 10;
        }

        char left[30] = "0";   
        char right[30] = "0";

        if (d <= len)
            strcpy(right, sq_str + len - d);
        else
            strcpy(right, sq_str);

        if (len - d > 0) {
            strncpy(left, sq_str, len - d);
            left[len - d] = '\0';
        }

        long left_val = atol(left);
        long right_val = atol(right);

        if (left_val + right_val == i) {
            printf("%ld ", i);
            found = 1;
        }
    }

    if (!found) {
        printf("INVALID RANGE");
    }
}



int main()
{
    string p_temp;
    getline(cin, p_temp);

    int p = stoi(ltrim(rtrim(p_temp)));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    kaprekarNumbers(p, q);

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
